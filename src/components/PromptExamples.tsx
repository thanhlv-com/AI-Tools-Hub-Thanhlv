import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { PromptFormData, PromptExample } from "@/types/prompt";
import { 
  FileText, 
  Code, 
  Languages, 
  Download,
  Lightbulb,
  Copy,
  CheckCircle2
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const PROMPT_EXAMPLES: PromptExample[] = [
  {
    id: "blog-content",
    title: "T·∫°o n·ªôi dung Blog",
    description: "Prompt cho vi·ªác t·∫°o b√†i vi·∫øt blog chuy√™n nghi·ªáp v·ªõi SEO t·ªëi ∆∞u",
    use_case: "Content Marketing, Blogging, SEO",
    json: {
      prompt_goal: "T·∫°o b√†i vi·∫øt blog chuy√™n nghi·ªáp, h·∫•p d·∫´n v√† t·ªëi ∆∞u SEO v·ªÅ ch·ªß ƒë·ªÅ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh",
      target_audience: "ƒê·ªôc gi·∫£ quan t√¢m ƒë·∫øn c√¥ng ngh·ªá, doanh nh√¢n, v√† nh·ªØng ng∆∞·ªùi mu·ªën h·ªçc h·ªèi",
      output_format: "Markdown v·ªõi c·∫•u tr√∫c heading, subheading, v√† bullet points",
      task: "Vi·∫øt m·ªôt b√†i blog ho√†n ch·ªânh bao g·ªìm: ti√™u ƒë·ªÅ h·∫•p d·∫´n, m·ªü b√†i thu h√∫t, n·ªôi dung chi ti·∫øt v·ªõi v√≠ d·ª• c·ª• th·ªÉ, v√† k·∫øt lu·∫≠n c√≥ call-to-action",
      persona: "Chuy√™n gia content marketing v·ªõi 10 nƒÉm kinh nghi·ªám, am hi·ªÉu SEO v√† storytelling",
      context: "B√†i vi·∫øt s·∫Ω ƒë∆∞·ª£c ƒëƒÉng tr√™n blog c√¥ng ty c√¥ng ngh·ªá, nh·∫Øm ƒë·∫øn vi·ªác tƒÉng traffic v√† engagement",
      constraints: [
        "ƒê·ªô d√†i: 1500-2000 t·ª´",
        "Bao g·ªìm √≠t nh·∫•t 5 heading ph·ª•",
        "S·ª≠ d·ª•ng t·ª´ kh√≥a ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh t·ªëi thi·ªÉu 3-5 l·∫ßn",
        "Tone of voice: Chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán",
        "Bao g·ªìm √≠t nh·∫•t 3 v√≠ d·ª• th·ª±c t·∫ø"
      ],
      examples: `Input: "Vi·∫øt blog v·ªÅ AI trong marketing"\n\nExpected Output:\n# AI trong Marketing: C√°ch M·∫°ng H√≥a Chi·∫øn L∆∞·ª£c Kinh Doanh Th·ªùi ƒê·∫°i S·ªë\n\n## M·ªü ƒë·∫ßu\nTr√≠ tu·ªá nh√¢n t·∫°o (AI) ƒëang...\n\n## 1. AI Thay ƒê·ªïi C√°ch Ch√∫ng Ta Hi·ªÉu Kh√°ch H√†ng\n### Personalization ·ªü M·ª©c ƒê·ªô C√° Nh√¢n\n- V√≠ d·ª•: Netflix s·ª≠ d·ª•ng AI ƒë·ªÉ...\n\n## 2. Automation trong Email Marketing\n...\n\n## K·∫øt lu·∫≠n\nB·∫°n ƒë√£ s·∫µn s√†ng √°p d·ª•ng AI v√†o strategy marketing c·ªßa m√¨nh ch∆∞a?`,
      metadata: {
        created_at: "2025-01-05",
        version: "1.0",
        ai_model_recommendation: "claude-3-sonnet"
      }
    }
  },
  {
    id: "code-analysis",
    title: "Ph√¢n t√≠ch Code",
    description: "Prompt ƒë·ªÉ review v√† ph√¢n t√≠ch code v·ªõi c√°c g·ª£i √Ω c·∫£i thi·ªán",
    use_case: "Code Review, Debugging, Best Practices",
    json: {
      prompt_goal: "Th·ª±c hi·ªán code review chi ti·∫øt v√† ƒë∆∞a ra c√°c g·ª£i √Ω c·∫£i thi·ªán v·ªÅ performance, security v√† maintainability",
      target_audience: "L·∫≠p tr√¨nh vi√™n t·ª´ junior ƒë·∫øn senior, team lead, v√† technical manager",
      output_format: "Structured report v·ªõi c√°c section: T·ªïng quan, V·∫•n ƒë·ªÅ ph√°t hi·ªán, G·ª£i √Ω c·∫£i thi·ªán, v√† Code example",
      task: "Ph√¢n t√≠ch code ƒë∆∞·ª£c cung c·∫•p v√† ƒë∆∞a ra b√°o c√°o chi ti·∫øt bao g·ªìm: ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng code, ph√°t hi·ªán potential bugs, security issues, performance bottlenecks, v√† ƒë·ªÅ xu·∫•t refactoring",
      persona: "Senior Software Architect v·ªõi chuy√™n m√¥n v·ªÅ clean code, security, v√† system design",
      context: "Code review cho d·ª± √°n production v·ªõi y√™u c·∫ßu high performance v√† security cao",
      constraints: [
        "Focus v√†o: Security, Performance, Maintainability, v√† Best Practices",
        "ƒê∆∞a ra code examples c·ª• th·ªÉ cho m·ªói suggestion",
        "Ph√¢n lo·∫°i issues theo m·ª©c ƒë·ªô: Critical, High, Medium, Low",
        "Gi·∫£i th√≠ch l√Ω do cho m·ªói recommendation",
        "Kh√¥ng v∆∞·ª£t qu√° 2000 t·ª´ cho to√†n b·ªô report"
      ],
      examples: `Input: \`\`\`javascript\nfunction getUserData(id) {\n  return fetch('/api/users/' + id)\n    .then(res => res.json())\n}\n\`\`\`\n\nExpected Output:\n# Code Review Report\n\n## T·ªïng quan\nFunction getUserData c√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ v·ªÅ error handling...\n\n## Issues Ph√°t hi·ªán\n### üî¥ Critical: Thi·∫øu Error Handling\n- **Problem**: Function kh√¥ng handle network errors\n- **Impact**: App c√≥ th·ªÉ crash khi API fail\n- **Solution**: \`\`\`javascript\nfunction getUserData(id) {\n  return fetch('/api/users/' + id)\n    .then(res => {\n      if (!res.ok) throw new Error('Failed to fetch');\n      return res.json();\n    })\n    .catch(err => console.error('Error:', err));\n}\n\`\`\``,
      metadata: {
        created_at: "2025-01-05",
        version: "1.0",
        ai_model_recommendation: "claude-3-sonnet"
      }
    }
  },
  {
    id: "translation-rewrite",
    title: "D·ªãch thu·∫≠t v√† Vi·∫øt l·∫°i",
    description: "Prompt cho d·ªãch thu·∫≠t chuy√™n nghi·ªáp v√† vi·∫øt l·∫°i n·ªôi dung",
    use_case: "Translation, Content Adaptation, Localization",
    json: {
      prompt_goal: "D·ªãch v√† chuy·ªÉn th·ªÉ n·ªôi dung m·ªôt c√°ch t·ª± nhi√™n, gi·ªØ nguy√™n √Ω nghƒ©a v√† tone c·ªßa vƒÉn b·∫£n g·ªëc",
      target_audience: "Translator, Content creator, Marketing team l√†m vi·ªác v·ªõi multiple markets",
      output_format: "Text ƒë∆∞·ª£c d·ªãch + b·∫£ng so s√°nh thu·∫≠t ng·ªØ chuy√™n m√¥n + notes v·ªÅ cultural adaptation",
      task: "D·ªãch vƒÉn b·∫£n t·ª´ ng√¥n ng·ªØ ngu·ªìn sang ng√¥n ng·ªØ ƒë√≠ch, ƒë·ªìng th·ªùi adapt cho cultural context v√† target audience c·ª• th·ªÉ. Gi·∫£i th√≠ch c√°c quy·∫øt ƒë·ªãnh translation quan tr·ªçng.",
      persona: "Professional translator v·ªõi background v·ªÅ linguistics v√† cultural studies, chuy√™n v·ªÅ business v√† technical translation",
      context: "D·ªãch thu·∫≠t cho t√†i li·ªáu business, marketing materials, ho·∫∑c technical documentation c·∫ßn ƒë·ªô ch√≠nh x√°c cao",
      constraints: [
        "Gi·ªØ nguy√™n tone v√† style c·ªßa vƒÉn b·∫£n g·ªëc",
        "Adapt cultural references cho target audience",
        "Explain c√°c thu·∫≠t ng·ªØ chuy√™n m√¥n kh√¥ng th·ªÉ d·ªãch tr·ª±c ti·∫øp",
        "ƒê∆∞a ra alternative translations cho c√°c c·ª•m t·ª´ ambiguous",
        "Format: Original text + Translation + Notes"
      ],
      examples: `Input: "Translate this English business proposal to Vietnamese for a formal B2B context"\n\nExpected Output:\n## VƒÉn b·∫£n ƒë√£ d·ªãch\n[Vietnamese translation]\n\n## B·∫£ng thu·∫≠t ng·ªØ\n| English | Vietnamese | Notes |\n|---------|------------|-------|\n| ROI | ROI (Return on Investment) | Gi·ªØ nguy√™n do l√† thu·∫≠t ng·ªØ qu·ªëc t·∫ø |\n| Stakeholder | C√°c b√™n li√™n quan | D·ªãch ƒë·ªÉ d·ªÖ hi·ªÉu h∆°n |\n\n## Cultural Adaptation Notes\n- Adjusted greeting style ƒë·ªÉ ph√π h·ª£p v·ªõi business culture Vi·ªát Nam\n- Th√™m honorific expressions ƒë·ªÉ th·ªÉ hi·ªán t√¥n tr·ªçng\n- Modified timeline expressions theo format dd/mm/yyyy`,
      metadata: {
        created_at: "2025-01-05",
        version: "1.0",
        ai_model_recommendation: "claude-3-sonnet"
      }
    }
  }
];

interface PromptExamplesProps {
  onLoadExample: (example: PromptFormData) => void;
}

export function PromptExamples({ onLoadExample }: PromptExamplesProps) {
  const { toast } = useToast();
  const [copiedExample, setCopiedExample] = useState<string | null>(null);

  const copyExampleJSON = async (example: PromptExample) => {
    try {
      await navigator.clipboard.writeText(JSON.stringify(example.json, null, 2));
      setCopiedExample(example.id);
      setTimeout(() => setCopiedExample(null), 2000);
      toast({
        title: "ƒê√£ copy JSON!",
        description: "V√≠ d·ª• JSON ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard",
      });
    } catch (error) {
      toast({
        title: "L·ªói copy",
        description: "Kh√¥ng th·ªÉ copy v√†o clipboard",
        variant: "destructive"
      });
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Lightbulb className="w-5 h-5 text-primary" />
          <span>Th∆∞ vi·ªán V√≠ d·ª•</span>
        </CardTitle>
        <CardDescription>
          3 v√≠ d·ª• JSON prompt chi ti·∫øt cho c√°c use case ph·ªï bi·∫øn
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="blog-content" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="blog-content" className="text-xs">
              <FileText className="w-4 h-4 mr-1" />
              Blog
            </TabsTrigger>
            <TabsTrigger value="code-analysis" className="text-xs">
              <Code className="w-4 h-4 mr-1" />
              Code
            </TabsTrigger>
            <TabsTrigger value="translation-rewrite" className="text-xs">
              <Languages className="w-4 h-4 mr-1" />
              D·ªãch thu·∫≠t
            </TabsTrigger>
          </TabsList>
          
          {PROMPT_EXAMPLES.map((example) => (
            <TabsContent key={example.id} value={example.id} className="mt-4">
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold text-lg">{example.title}</h3>
                  <p className="text-sm text-muted-foreground mb-2">{example.description}</p>
                  <Badge variant="secondary">{example.use_case}</Badge>
                </div>
                
                <div className="space-y-2">
                  <h4 className="font-medium">Highlights:</h4>
                  <ul className="text-sm space-y-1 text-muted-foreground">
                    <li>‚Ä¢ <strong>M·ª•c ti√™u:</strong> {example.json.prompt_goal.substring(0, 100)}...</li>
                    <li>‚Ä¢ <strong>ƒê·ªëi t∆∞·ª£ng:</strong> {example.json.target_audience}</li>
                    <li>‚Ä¢ <strong>ƒê·ªãnh d·∫°ng:</strong> {example.json.output_format}</li>
                    <li>‚Ä¢ <strong>R√†ng bu·ªôc:</strong> {example.json.constraints.length} ƒëi·ªÅu ki·ªán</li>
                  </ul>
                </div>
                
                <div className="flex space-x-2">
                  <Button
                    variant="default"
                    size="sm"
                    onClick={() => onLoadExample(example.json)}
                    className="flex-1"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    T·∫£i v√†o Form
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyExampleJSON(example)}
                  >
                    {copiedExample === example.id ? (
                      <CheckCircle2 className="w-4 h-4" />
                    ) : (
                      <Copy className="w-4 h-4" />
                    )}
                  </Button>
                </div>
              </div>
            </TabsContent>
          ))}
        </Tabs>
      </CardContent>
    </Card>
  );
}