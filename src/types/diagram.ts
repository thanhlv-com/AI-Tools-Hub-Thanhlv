export type DiagramTypeId = 
  | 'sequence'
  | 'usecase' 
  | 'component'
  | 'deployment'
  | 'class'
  | 'activity'
  | 'state';

export interface DiagramType {
  id: DiagramTypeId;
  name: string;
  description: string;
  icon: string;
  category: string;
  supportedFormats: string[];
  prompt: string;
}

export interface DiagramFormat {
  id: string;
  name: string;
  description: string;
  icon: string;
  fileExtension: string;
  syntax: string;
}

export interface DiagramStyle {
  id: string;
  name: string;
  description: string;
  icon: string;
  prompt: string;
}

export interface DiagramComplexity {
  id: string;
  name: string;
  description: string;
  icon: string;
  level: string;
  prompt: string;
}

export interface DiagramRequest {
  description: string;
  diagramType: DiagramTypeId;
  outputFormat: string;
  outputLanguage: string;
  style: string;
  complexity: string;
  includeIcons?: boolean;
  includeColors?: boolean;
  includeNotes?: boolean;
  model?: string;
}

export interface DiagramResult {
  pumlCode: string;
  explanation: string;
  model: string;
  error?: string;
  metadata?: {
    processingTime?: number;
    codeLength: number;
  };
}

export interface DiagramHistory {
  id: string;
  title: string;
  timestamp: number;
  description: string;
  diagramType: DiagramTypeId;
  outputFormat: string;
  outputLanguage: string;
  style: string;
  complexity: string;
  includeIcons: boolean;
  includeColors: boolean;
  includeNotes: boolean;
  diagramCode: string; // Generic field that works for all formats
  pumlCode?: string; // Legacy field for backwards compatibility
  explanation?: string; // Optional explanation (mainly for PlantUML)
  model: string;
  error?: string;
  metadata?: {
    descriptionLength: number;
    codeLength: number;
    processingTime?: number;
  };
}

export const DIAGRAM_TYPES: DiagramType[] = [
  {
    id: 'sequence',
    name: 'Sequence Diagram',
    description: 'M√¥ t·∫£ lu·ªìng t∆∞∆°ng t√°c theo th·ª© t·ª± th·ªùi gian',
    icon: 'üîÑ',
    category: 'Behavioral',
    supportedFormats: ['puml'],
    prompt: 'T·∫°o sequence diagram v·ªõi autonumber, icons th√≠ch h·ª£p, v√† styling chuy√™n nghi·ªáp'
  },
  {
    id: 'usecase',
    name: 'Use Case Diagram',
    description: 'M√¥ t·∫£ c√°c use case c·ªßa h·ªá th·ªëng',
    icon: 'üë§',
    category: 'Behavioral',
    supportedFormats: ['puml'],
    prompt: 'T·∫°o use case diagram v·ªõi actors, use cases, v√† relationships r√µ r√†ng'
  },
  {
    id: 'component',
    name: 'Component Diagram',
    description: 'M√¥ t·∫£ c·∫•u tr√∫c c√°c th√†nh ph·∫ßn',
    icon: 'üì¶',
    category: 'Structural',
    supportedFormats: ['puml'],
    prompt: 'T·∫°o component diagram v·ªõi components, interfaces, v√† dependencies'
  },
  {
    id: 'deployment',
    name: 'Deployment Diagram',
    description: 'M√¥ t·∫£ tri·ªÉn khai v·∫≠t l√Ω c·ªßa h·ªá th·ªëng',
    icon: 'üöÄ',
    category: 'Structural',
    supportedFormats: ['puml'],
    prompt: 'T·∫°o deployment diagram v·ªõi nodes, artifacts, v√† deployment relationships'
  },
  {
    id: 'class',
    name: 'Class Diagram',
    description: 'M√¥ t·∫£ c·∫•u tr√∫c l·ªõp v√† m·ªëi quan h·ªá',
    icon: 'üèóÔ∏è',
    category: 'Structural',
    supportedFormats: ['puml'],
    prompt: 'T·∫°o class diagram v·ªõi classes, attributes, methods, v√† relationships'
  },
  {
    id: 'activity',
    name: 'Activity Diagram',
    description: 'M√¥ t·∫£ lu·ªìng ho·∫°t ƒë·ªông v√† quy tr√¨nh',
    icon: '‚ö°',
    category: 'Behavioral',
    supportedFormats: ['puml'],
    prompt: 'T·∫°o activity diagram v·ªõi activities, decisions, v√† control flows'
  },
  {
    id: 'state',
    name: 'State Diagram',
    description: 'M√¥ t·∫£ tr·∫°ng th√°i v√† chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i',
    icon: 'üîÄ',
    category: 'Behavioral',
    supportedFormats: ['puml'],
    prompt: 'T·∫°o state diagram v·ªõi states, transitions, v√† events'
  }
];